---
alwaysApply: true
---

This project adheres to a structured development plan and a set of coding guidelines to ensure consistency, quality, and maintainability.

### **Service Implementation Plan**

The complete blueprint for this project, including the architecture, tool definitions, and containerization strategy, is documented in the **[Google Workspace MCP Service Implementation Plan](google-workspace-mcp.md)**. This document outlines:

- **Project Setup**: Configuring Google Cloud, enabling APIs, and setting up OAuth 2.0.
- **Tool Definitions**: Detailed specifications for Google Drive, Gmail, and Google Calendar tools.
- **Server Implementation**: The design of the FastAPI server.
- **Containerization**: Instructions for building and running the application with Docker.

### **Python and FastAPI Development Guidelines**

All Python and FastAPI code should follow the standards defined in the **[Python and FastAPI Development Guidelines](python.mdc)**. These guidelines cover:

- **Code Style**: Functional programming, naming conventions, and file structure.
- **FastAPI Best Practices**: Dependency injection, asynchronous operations, and error handling.
- **Performance**: Strategies for optimization, caching, and efficient data handling.
- **Error Handling**: Consistent and robust error management patterns.

Please familiarize yourself with both documents before contributing to the project.
This project adheres to a structured development plan and a set of coding guidelines to ensure consistency, quality, and maintainability.

### **Service Implementation Plan**

The complete blueprint for this project, including the architecture, tool definitions, and containerization strategy, is documented in the **[Google Workspace MCP Service Implementation Plan](google-workspace-mcp.md)**. This document outlines:

- **Project Setup**: Configuring Google Cloud, enabling APIs, and setting up OAuth 2.0.
- **Tool Definitions**: Detailed specifications for Google Drive, Gmail, and Google Calendar tools.
- **Server Implementation**: The design of the FastAPI server.
- **Containerization**: Instructions for building and running the application with Docker.

### **Python and FastAPI Development Guidelines**

All Python and FastAPI code should follow the standards defined in the **[Python and FastAPI Development Guidelines](python.mdc)**. These guidelines cover:

- **Code Style**: Functional programming, naming conventions, and file structure.
- **FastAPI Best Practices**: Dependency injection, asynchronous operations, and error handling.
- **Performance**: Strategies for optimization, caching, and efficient data handling.
- **Error Handling**: Consistent and robust error management patterns.

Please familiarize yourself with both documents before contributing to the project.
